[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cycax-server"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.12,<3.13"
license = "Apache-2.0"
keywords = []
authors = [{ name = "Martin Slabber", email = "martin@tsolo.io" }]
maintainers = [{ name = "Martin Slabber", email = "martin@tsolo.io" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/tsolo-io/cycax-server#readme"
Issues = "https://github.com/tsolo-io/cycax-server/issues"
Source = "https://github.com/tsolo-io/cycax-server"

[tool.hatch.version]
path = "src/cycax_server/__about__.py"

[tool.hatch.envs.default]
dependencies = [
    "python-multipart",
    "pydantic-settings==2.7.0",
    "uvicorn[standard]==0.34.2",
    "fastapi[standard]==0.115.12",
    "prometheus_fastapi_instrumentator==7.0.0",
]
[tool.hatch.envs.types]
extra-dependencies = ["mypy>=1.0.0"]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/cycax_server tests}"
[tool.hatch.envs.docs]
dependencies = [ # Use the latest documentation tools.
    "mkdocs",
    "httpx",
    "mkdocs-material",
    "mkdocstrings[python]",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr 0.0.0.0:8005"

[tool.hatch.envs.lint]
detached = true
dependencies = [ # Use the latest linter and code checking tools.
    "mypy>=1.11.2",
    "ruff>=0.6.0",
    "typos>=1.24.1",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/tsolo_ceph tests}"
spell = "typos --exclude='**/*.svg' --exclude='**/*.css' --exclude='**/*.png' --exclude='**/*.json' --exclude='docs/site' --exclude='reports' {args:.}"
style = ["ruff check --exclude scripts/ --fix {args:.}"]
fmt = ["ruff format --exclude scripts/ {args:.}", "style"]
all = ["style", "typing"]


[tool.black]
target-version = ["py312"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py312"
line-length = 120
lint.select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
lint.ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
]
lint.unfixable = [
    #"F401", # Don't touch unused imports
]

[tool.ruff.lint.isort]
known-first-party = ["tsolo_ceph"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
[tool.hatch.envs.testing]
extra-dependencies = ["coverage[toml]>=6.5", "pytest>=8.3.2"]

[tool.hatch.envs.testing.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
    "coverage json -o reports/coverage/coverage.json",
    "coverage html -d reports/coverage",
]
cov = ["test-cov", "cov-report"]

[tool.coverage.run]
source_pkgs = ["cycax_server", "tests"]
branch = true
parallel = true
omit = ["src/cycax_server/__about__.py"]

[tool.coverage.paths]
cycax_server = ["src/cycax_server", "*/cycax_server/src/cycax_server"]
tests = ["tests", "*/cycax_server/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
